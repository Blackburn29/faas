# SSH connections to remote hosts will use these parameters
ansible_ssh_user: ubuntu
ansible_ssh_private_key_file: "~/.ssh/{{ ec2.ssh_key }}.pem"

# Parameters specific to ec2
ec2:
    device_name: /dev/sda1
    security_group: faas
    placement_group: faas-cluster
    ssh_key: faas 
    aws_region: us-east-1
    vpc_id: vpc-12e03776
    vpc_subnet: 10.0.0.0/20                     # The subnet for the VPC (for the network file system)
    
    image_name: faas-image                      # The name to give to the newly created image
    custom_image_id: ami-bf89cdda               # Dynamically updated when a new AMI is built using build-finish.yml. You can edit this manually too.
    ami_description: cado-nfs, slurm, nfs, supervisor 

# Specify slurm-specific settings here
slurm:
    partition_name: factor
    nodes:                                      # Specify the nodename entries in slurm.conf, 
                                                # which should included the set of all possible 
                                                # private IP addresses in the VPC subnets. We 
                                                # give the master node half the cores to make 
                                                # sure that it isn't overloaded. 
     - {name: "ip-10-0-0-4", cpus: "{{ (master.cores / 2 )|int }}" }
     - {name: "ip-10-0-0-[5-254]", cpus: "{{ slave.cores }}" }
     - {name: "ip-10-0-[1-3]-[4-254]", cpus: "{{ slave.cores }}" }
    

# Source directory for installed packages on remote machines
sourcedir: /usr/local/src

# Remote repository location
repodir: /home/ubuntu/faas

# NFS-shared directory for remote machines
workdir: /workdir

# Define variables for each type of instance to be launched
my_tag: faas                                    # change this tag to ensure that your instances
                                                # will have unique tags. This can be any 
                                                # alphanumeric string.
ami_builder:
    tag: "{{ my_tag }}_ami_builder"
    group: "tag_Name_{{ my_tag }}_ami_builder"
    image: ami-d05e75b8                         # this is the base ubuntu 14.04 AMI that 
                                                # the custom image is built from
    type: m4.large                              # must be an instance type that supports 
                                                # enhanced networking
    volume_size: 8
    count: 1

# Parameters adjusting how the EC2 cluster is launched
master:
    tag: "{{ my_tag }}_master"
    group: "tag_Name_{{ my_tag }}_master"
    placement_group: "{{ ec2.placement_group }}"
    image: "{{ ec2.custom_image_id }}"
    type: c4.8xlarge
    cores: 36
    volume_size: 50
    delete_volume_on_termination: no
    vpc_subnet_id: subnet-84f4acaf
    zone: us-east-1b
    private_ip: 10.0.0.4                        # Make sure that this IP address is in your EC2
                                                # subnet and is not already taken by a node. The
                                                # master node address will be baked into the EC2
                                                # image so that nodes launched with the image will 
                                                # automatically connect to the master node for 
                                                # slurm and NFS. 

mpi:
    tag: "{{ my_tag }}_mpi"
    group: "tag_Name_{{ my_tag }}_mpi"
    placement_group: "{{ ec2.placement_group }}"
    image: "{{ ec2.custom_image_id }}"
    type: c4.8xlarge
    cores: 36
    volume_size: 8
    count: 63
    spot_price: 2.40
    spot_wait_timeout: 1200                   
    zone: "{{ master.zone }}"
    vpc_subnet_id: "{{ master.vpc_subnet_id }}"


slave:
    tag: "{{ my_tag }}_slave"
    group: "tag_Name_{{ my_tag }}_slave"
    image: "{{ ec2.custom_image_id }}"
    cores: 36
#    type: t2.micro
    type: c4.8xlarge
    volume_size: 8
    spot_price: 1.80
    spot_wait_timeout: 1200

    launch_groups:
        group1:
            tag: "{{ my_tag }}_slave_group1"
            zone: us-east-1b
            vpc_subnet_id: subnet-84f4acaf
            count: 0
        group2:
            tag: "{{ my_tag }}_slave_group2"
            zone: us-east-1c
            vpc_subnet_id: subnet-c4f9e9b3
            count: 45
        group3:
            tag: "{{ my_tag }}_slave_group3"
            zone: us-east-1d
            vpc_subnet_id: subnet-4cf5df15
            count: 45
        group4:
            tag: "{{ my_tag }}_slave_group4"
            zone: us-east-1e
            vpc_subnet_id: subnet-24de1219
            count: 46


# Parameters for supervisor, a process manager that can be used to run the factorization.
supervisor:
    remote_conf: supervisord.conf
    port: 9001
    username: username                # username and password to access the supervisor http
                                          # server at <server-ip>:<supervisord_port>
    password: password
    email: luke.valenta@gmail.com                    # supervisor will send crash reports to this address

# These commands are run after the corresponding stages have completed, and can
# be used to shut down EC2 instances, email intermediate or final results, 
# or anything else. If you wish to run multiple commands, it is recommended that 
# you copy a script to the master node and call the script here.
commands:
    post_sieve: 'ansible-playbook -i {{ repodir }}/ec2-cluster/ec2.py {{ repodir }}/ec2-cluster/terminate-cluster.yml --tags=slave'                           
    post_linalg: 'ansible-playbook -i {{ repodir }}/ec2-cluster/ec2.py {{ repodir }}/ec2-cluster/terminate-cluster.yml --tags=mpi'                           
    post_factor: 'ansible-playbook -i {{ repodir }}/ec2-cluster/ec2.py {{ repodir }}/ec2-cluster/stop-master.yml'                           

# Parameters specific to cado-nfs. To add more parameters to this list, edit
# both the variables below and 'roles/factor/templates/cado_params.yml'.
params_file_remote: /home/ubuntu/params.{{ cado.name }}
cado:
    name: slurm155
    N: 12617458575301661623946633850938771797502749154937162308217317392296845516095043908426953372279272752145464175799696190139570782546328967811791210408888451
    alim: 15246811
    rlim: 31940624
    lpbr: 28
    lpba: 28
    tasks:
        mpi: "16x16"
        polyselect: 
            threads: 2
            degree: 5
            P: 500000
            admax: 2e7
            incr: 60
            nq: 1000
        sieve:
            threads: 2
            mfbr: 62
            mfba: 61
            rlambda: 2.24
            alambda: 2.20
            ncurves0: 23
            ncurves1: 15
            qrange: 2500
        I: 14
        msieve:
            target_density: 120
        filter:
            threads: "{{ master.cores }}"
            purge: 
                keep: 160
            maxlevel: 25
            ratio: 1.1
            merge:
                forbw: 3
